/*
THE SECRET TOKEN

There is a column secret_token in the postgresql projects table.  That token is
generated by the server and must be made available by the hub to the project at startup,
so the hubs can connect to the project.   It is also used internally to secure some
communications (e.g., sage worksheets).  The secret token must be written
to a file whose path is either $COCALC_SECRET_TOKEN *or* $DATA/secret-token.

For a compute server, hubs do not connect to it and shouldn't be able to;
instead compute servers connect to cocalc.  In that case the secret token
will always be set to a random value on startup, and used only for internal
communications.
*/

import { readFileSync } from "fs";
import { getLogger } from "./logger";
import { join } from "path";
import { data } from "@cocalc/backend/data";
import { compute_server_id } from "./data";

const logger = getLogger("data");

export let secretToken: string = "";

function init() {
  if (compute_server_id || process.env.COCALC_TEST_MODE) {
    // it's a compute server or in test mode -- leave blank
    return;
  }
  // not a compute server -- read from file
  logger.debug(`COCALC_SECRET_TOKEN = ${process.env.COCALC_SECRET_TOKEN}`);
  const secretTokenPath =
    process.env.COCALC_SECRET_TOKEN ?? join(data, "secret-token");
  try {
    secretToken = readFileSync(secretTokenPath).toString();
  } catch {
    // no file
    return;
  }
  logger.debug("Successfully initialized project secret_token");
}

init();
