/*
 *  This file is part of CoCalc: Copyright © 2024 Sagemath, Inc.
 *  License: MS-RSL – see LICENSE.md for details
 */

import type { IconName } from "@cocalc/frontend/components/icon";

import { Map } from "immutable";

import { createTypedMap, TypedMap } from "@cocalc/frontend/app-framework";
import type { ExecOutput } from "@cocalc/util/db-schema/projects";
import { IProcessedLatexLog } from "./latex-log-parser";

interface IBuildSpec {
  button: boolean;
  label: string;
  icon: IconName;
  tip: string;
}

export interface IBuildSpecs {
  build: IBuildSpec;
  latex: IBuildSpec;
  bibtex: IBuildSpec;
  sagetex: IBuildSpec;
  pythontex: IBuildSpec;
  knitr: IBuildSpec;
  clean: IBuildSpec;
}

export type BuildSpecName = keyof IBuildSpecs;

export const BUILD_SPECS: IBuildSpecs = {
  build: {
    button: true,
    label: "Build",
    icon: "retweet",
    tip: "Build the document, running LaTeX, BibTex, Sage, etc.",
  },

  latex: {
    button: false,
    label: "LaTeX",
    icon: "tex-file",
    tip: "Run the LaTeX build command (typically latexmk)",
  },

  bibtex: {
    button: false,
    label: "BibTeX",
    icon: "file-code",
    tip: "Process bibliography using Bibtex",
  },

  sagetex: {
    button: false,
    label: "SageTex",
    icon: "sagemath-bold",
    tip: "Run SageTex, if necessary",
  },

  pythontex: {
    button: false,
    label: "PythonTeX",
    icon: "python",
    tip: "Run PythonTeX3, if necessary",
  },

  knitr: {
    button: false,
    label: "Knitr",
    icon: "r",
    tip: "Run Knitr, if necessary",
  },

  clean: {
    button: true,
    label: "Clean",
    icon: "trash",
    tip: "Delete all autogenerated auxiliary files",
  },
} as const;

export type BuildLog = ExecOutput & {
  parse?: IProcessedLatexLog;
  output?: string; // used in run_clean
};

export type BuildLogs = Map<BuildSpecName, TypedMap<BuildLog>>;

interface ScrollIntoViewParams {
  page: number;
  y: number;
  id: string;
}

export const ScrollIntoViewRecord = createTypedMap<ScrollIntoViewParams>();
export type ScrollIntoViewMap = TypedMap<ScrollIntoViewParams>;

// export type JobInfos = Map<BuildSpecName, TypedMap<ExecOutput>>;
