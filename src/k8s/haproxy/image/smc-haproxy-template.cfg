# This file uses golang text templates (http://golang.org/pkg/text/template/) to
# dynamically configure the haproxy loadbalancer.
global
    daemon
    stats socket /tmp/haproxy
    server-state-file global
    server-state-base /var/state/haproxy/

{{ if eq .startSyslog "true" }}
    # log using a syslog socket
    log /var/run/haproxy.log.socket local0 info
    log /var/run/haproxy.log.socket local0 notice
{{ end }}

    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK

    ssl-default-bind-options no-tls-tickets

    tune.ssl.default-dh-param 2048

defaults
    log global
    load-server-state-from-file global
    log     global
    mode    http
    option  httplog
    option  forwardfor
    option  redispatch
    option  http-server-close
    timeout connect 5000ms
    timeout client  5000ms
    timeout server  5000ms
    timeout tunnel  120s

    stats   enable
    stats   uri     /haproxy
    stats   realm   Haproxy\    Statistics


# haproxy stats, required hostport and firewall rules for :1936
listen stats
    bind *:1936
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /

# Dynamically create all the backend load balancing rules, based on knowledge
# of all the ip addresses of pods.  We only actually create smc-webapp-static, hub, etc., and
# ignore any others.

{{range $i, $svc := .services.http}}
{{ $svcName := $svc.Name }}
# http service -- {{$svc.Name}}
{{ if eq $svcName "smc-webapp-static" }}
backend smc-webapp-static
    option  httplog
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

    balance roundrobin
    {{range $j, $ep := $svc.Ep}}server {{$ep}} {{$ep}} check port {{$svc.BackendPort}} inter 5
    {{end}}
{{end}}
{{ if eq $svcName "smc-hub:5000" }}
backend hub
    balance leastconn
    #balance roundrobin
    timeout server 7s
    option httpclose

    option httpchk /alive
    # this specific cookie is also referenced in client_browser.coffee -- and also below for the proxy (more efficient to have same process do both)
    # cookie documentation: http://cbonte.github.io/haproxy-dconv/configuration-1.6.html#4.2-cookie
    cookie SMCSERVERID3 insert indirect nocache maxidle 1h maxlife 1h
    {{range $j, $ep := $svc.Ep}}server {{$ep}} {{$ep}} cookie s{{$j}} check inter 1500 maxconn 1000
    {{end}}
{{ end}}


{{ if eq $svcName "smc-hub:5001" }}
backend hub-proxy
    balance leastconn
    timeout server 7s
    #balance roundrobin

    option httpchk /alive

    # this cookie is primarily used in the hub -- see above
    cookie SMCSERVERID3 insert indirect nocache maxidle 15m maxlife 1h
    option httpclose

    {{range $j, $ep := $svc.Ep}}server {{$ep}} {{$ep}} cookie s{{$j}} check inter 1500 maxconn 1000
    {{end}}
{{ end }}
{{ end }}

frontend http
    bind    *:80
    redirect scheme https if !{ ssl_fc }

frontend https
    bind    *:443 ssl crt /secret/nopassphrase.pem no-sslv3
    reqadd  X-Forwarded-Proto:\ https

    # security headers motivated by https://securityheaders.io
    http-response set-header Strict-Transport-Security max-age=31536000;\ includeSubdomains;\ preload
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection 1;\ mode=block
    # http://content-security-policy.com/ -- append "-Report-Only" to "Content-Security-Policy" for debugging the measures first.
    # hsy: these CSP headers do work and give an "A" rating, but they block external libs like plot.ly and all others. Hence for now, that's disabled.
    # http-response set-header Content-Security-Policy "default-src 'unsafe-inline' 'unsafe-eval' data: blob: https://*.sagemath.com https://js.stripe.com https://apis.google.com https://www.google-analytics.com https://stats.g.doubleclick.net https://*.twitter.com https://*.gravatar.com; child-src https://*.sagemath.com https://plusone.google.com https://*.facebook.com https://*.twitter.com https://*.youtube.com https://js.stripe.com; connect-src https://*.sagemath.com wss://*.sagemath.com;"

    # replace "/policies/" with "/static/policies/" at the beginning of any request path.
    reqrep ^([^\ :]*)\ /policies/(.*)     \1\ /static/policies/\2

    # defining which backend to use
    acl         is_static path_beg /static
    acl         is_hub path_beg /hub /cookies /blobs /invoice /upload /alive /auth /stats /registration /projects /help /settings /customize /base_url.js
    acl         is_proxy path_reg ^/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/port
    acl         is_proxy path_reg ^/[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/raw

    # Only actually use the backends that we defined!

    {{ range $i, $svc := .services.http }}

    {{ if eq $svc.Name "smc-webapp-static" }}
    use_backend smc-webapp-static if is_static
    default_backend smc-webapp-static
    {{ end }}

    {{ if eq $svc.Name "smc-hub:5000" }}
    use_backend hub if is_hub
    {{ end }}

    {{ if eq $svc.Name "smc-hub:5001" }}
    use_backend hub-proxy if is_proxy
    {{ end }}

    {{ end }}

